[1장]

* 메소드가 길어지면 분리할 수 있는지 확인한다. (Ex. switch문 등..)
* 메소드를 분리한 후 꼭 테스트를 돌린다. -> (관련 4장)

* 메소드 내 변수명 등 네이밍에 신경을 쓴다.

* 메소드는 그 메소드가 사용하는 데이터가 있는 클래스 내에 있어야 한다.
  만약 해당 메소드가 자신이 존재하는 클래스에 있는 정보를 사용하지 않는 경우, 이것은 이 메소드가 잘못된 클래스 내에 위치한다는 것이다.
  그러므로 해당 메소드는 그것이 사용하는 데이터가 있는 클래스로 옮겨준다. -> (관련 p.36~37)

* 임시변수는 가능하면 제거하는 것이 좋다. (복잡해지고 길이도 길어지기 때문에)
  -> 물론 같은 메소드가 여러번 호출되면 퍼포먼스적으로 손해지만, 이는 그 메소드를 최적화 할 수 있다. -> (관련 p.41)
  -> 다른 케이스로는 클래스내 변수로 전환한다.
  -> 즉, 매번 사용할때마다 재계산이 맞는지 캐싱이 효율적인지는 클래스의 역할에 따라 다르므로 고심해야 한다.

* switch문을 사용할땐 자기 자신의 데이터를 사용해야지, 다른 객체의 데이터를 사용하면 안된다.
  -> 그 데이터가 있는 클래스 내로 옮긴다.
  Ex.  class Rental {                                   class Movie {
          switch(getMovie().getPrice()) { // X               switch(getPrice()) { // O

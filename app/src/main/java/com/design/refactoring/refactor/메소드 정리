[메소드 정리]

=> 리팩토링에 사용되는 기법을 정리한다.


* Extract Method
  -> 그룹으로 묶을 수 있는 코드 조각이 있다면, 코드의 목적이 잘 드러나는 이름으로 별개의 메소드로 뽑아낸다.
     (지나치게 길거나, 목적을 이해하기 위해 주석이 필요한 코드인 경우)

  이유) 1) 메소드가 잘게 쪼개져 있다면, 다른 메소드에서 사용될 확률이 높아진다.
        2) 잘 지은 이름의 메소드는, 주석을 읽는 느낌이 든다.

  만드는 절차)
         크게 세가지의 경우로 나눌 수 있다.

  Ex. private void printAll() {
                Enumeration e = orders.elements();
                double outstanding = 0.0;

                // 배너 표시
                System.out.println("**************");
                System.out.println("배너");
                System.out.println("**************");

                // outStanding 계산
                while(e.hasMoreElements()) {
                   Order each = (Order) e.nextElement();
                   outstanding += each.getAmonut();
                }

                // 상세 정보 표시
                System.out.println("outstanding: " + outstanding);
      }

  (1) 지역변수가 없는 경우
      -> 그룹으로 묶을 수 있는 코드 조각을, 별개의 메소드로 뽑아낸다. (네이밍 중요!)

      이 코드에서는 '// 배너 표시' 부분이 지역변수가 없는 부분이다.
      이는 (1) 의 경우이다.

      private void printBanner() {
         System.out.println("**************");
         System.out.println("배너");
         System.out.println("**************");
      }

      로 뽑아낼 수 있다.

  (2-1) 지역변수가 포함되어 있는 경우에서, 지역변수가 읽히기만 하는 경우 (값이 변하지 X)
        -> 변수를 메소드의 파라메터로 넘길 수 있다.

        이 코드에서는 '// 상세 정보 표시' 부분이 (2-1) 의 경우이다.

        private void printDetail(final double outstanding) {
          System.out.println("outstanding: " + outstanding);
        }

  (2-2) 지역변수가 포함되어 있는 경우에서, 지역변수에 값을 대입하는 경우 (값이 변함 O)
        -> 해당 지역변수가 뽑아낸 코드 안에서만 사용되는 경우, 해당 지역변수를 뽑아낸 코드의 임시변수로 옮기면 된다.
           반대로, 지역변수가 뽑아낸 코드 외부에서도 사용되는 경우, 리턴값으로 지정한다.

           이 코드에서는 '// outStanding' 부분이 (2-2) 의 경우이다.

           private double getOutstanding() {
              Enumeration e = order.elements();
              double result = 0.0;
              while (e.hasMoreElements()) {
                Order each = (Order) e.nextElement();
                result += each.getAmount();
              }
              return result;
           }

   이 세가지의 경우를 모두 적용한 printAll() 메소드는 다음과 같다.

      private void printAll() {
         printBanner();
         double outstanding = getOutstanding();
         printDetails(outstanding);
      }


* Replace Temp with Query
  -> 어떤 수식의 결과값을 저장하기 위해 임시변수를 사용하는 경우,
     수식을 따로 뽑아서 메소드로 만들고, 임시변수를 참조하는 곳을 모두 메소드 호출로 바꾼다.

  이유) 1) 메소드가 잘게 쪼개져 있다면, 다른 메소드에서 사용될 확률이 높아진다.
        2) 보통 임시변수를 사용하는 메소드는 길이가 길어진다.

  만드는 절차)

  Ex. private double getPrice() {
         int basePrice = quentity * price;
         double discountFactor;
         if(basePrice > 1000) {
             discountFactor = 0.95;
         } else {
             discountFactor = 0.98;
         }
         return basePrice * discountFactor;
      }

   이 코드에서 제거할 임시변수는 basePrice, discoutFactor 두가지이다.
   (1) 먼저 임시변수에 값이 한번만 대입되는 것을 명확히 하기 위해 final 을 붙여준다.

         final int basePrice = quentity * price;
         final double discountFactor;
           ...

   (2) 그룹으로 묶을 수 있는 코드 조각은 별개의 메소드로 뽑아낸다. (Extract Method 방식)

       private int basePrice() {
          return quentity * price;
       }

       private double discountFactor() {
          if(basePrice() > 1000) {
             return discountFactor = 0.95;
          } else {
             return discountFactor = 0.98;
          }
       }

   (3) 임시변수를 사용하는 곳을 모두 메소드 호출로 바꾼다.

   완성된 코드는 아래와 같다.

   private double getPrice() {
      return basePrice() * discountFactor();
   }


* Split Temporary Variable
  -> 임시변수에 값을 여러번 대입하는 경우엔, 각각의 대입에 대해 따로따로 임시변수를 만들어라.
     (루프 안에 있는 변수, i = i + (수식) 같은 경우 제외)

  이유) 1) 변수는 메소드 안에서 여러가지 용도로 사용되면 안된다. (코드 보는 사람에게 혼란을 줄 수 있음)

  만드는 절차)

  Ex. private void getDistance(final int time) {
         double acc = force / mass;
         ...
         if (secondTime > 0) {
            acc = secondTime * time;
         }
      }

  (1) 임시변수의 이름을 적절히 바꾸고, 해당 변수에 final 을 붙여준다.

         final double primaryAcc = force / mass;

  (2) 두번째로 대입되는 곳에서 빨간줄이 뜨면, 해당 부분에 다른 임시변수로 선언해준다.

         final double secondAcc = secondTime * time;

   완성된 코드는 아래와 같다.

   private void getDistance(final int time) {
      final double primaryAcc = force / mass;
      ...
      if(secondTime > 0) {
         final double secondAcc = secondTime * time;
      }
   }









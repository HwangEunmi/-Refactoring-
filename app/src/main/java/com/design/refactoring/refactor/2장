[2장]

* 리팩토링 목적 : 1) 소프트웨어를 보다 이해하기 쉽고, 수정하기 쉽도록 만드는 것
                 2) 겉으로 보이는 소프트웨어의 기능을 변경하지 않는다는 것

* 리팩토링과 퍼포먼스의 상관관계
  -> (대부분의 프로그램을 분석했을때) 프로그램은 대부분의 시간을 코드의 작은 부분에서 보낸다.
     만약 모든 코드를 동등하게 최적화 한다면 90% 낭비이다.
     왜냐하면 별로 많이 실행되지도 않는 코드를 최적화하는 것이기 때문이다. (시간낭비)

     그러므로
     1) 먼저 퍼포먼스를 신경쓰지않고 그냥 프로그램을 잘 분해된 형태로 개발한다.
     2) 프로파일러에서 프로그램을 실행한다.
        (프로그램을 모니터하여 이 프로그램이 어디서 시간을 보내고 공간을 얼마나 차지하는지 알려준다.)
     3) 퍼포먼스에 큰 영향을 미치는 프로그램의 작은 부분을 발견하면, 최적화 방법을 사용한다.

     4) 리팩토링을 할때와 마찬가지로 작은 단계로 나누어 코드를 변경한다.
     5) 각각의 단계가 끝난 후 컴파일, 테스트를 하고 프로파일러를 다시 실행시킨다.
     6) 퍼포먼스가 향상될때까지 코드를 수정한다.
        (동작에 시간이 많이 걸리는 부분을 찾고 제거한다.)

* 리팩토링을 한다는 것은 프로그램을 잘 분해한다는 뜻이므로, 최적화가 잘 되어있다는 것이다.

  그러므로
  1) 퍼포먼스 튜닝의 시간이 늘어난다. (퍼포먼스에 집중할 수 있는)
  2) 분석을 할 때 세밀하게 분석할 수 있다.

  즉, 리팩토링은 빠른 소프트웨어를 작성하는데 도움을 준다.




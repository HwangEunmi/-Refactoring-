
[스테이트 패턴]

// 객체가 특정 상태에 따라 행위(메소드 내용)가 달라질 경우,
직접 상태를 체크하여 행위를 호출하지 않고

Ex. if("ON".equals(type)) {

    } else if("OFF".equals(type)){

    }

상태를 객체화하여 상태가 행위를 호출할 수 있도록 위임한다.
-> 상태별로 if문으로 나눠야 하는데, 그 지옥에서 벗어날 수 있다.

즉, 상태에 따라 동일한 작업이 다른 방식으로 실행될 때,
해당 상태가 작업을 수행하도록 위임한다.

참고 : JAVA 객체지향 디자인패턴 7장


사용 예1) 1. 책은 처음에 누구나 대출할 수 있다.
          2. 책이 도서관에서 체크아웃되면 대출 중 상태로 바뀐다.
          3. 책이 대출중인 상태에 있을때만 예약할 수 있다.
          4. 예약 중인 상태의 책이 반환되면 책은 예약자에게 대출해주기 위해 일정기간 보관한다.
          5. 책이 보관중인 상태에 있을때 예약을 취소하거나, 보관기간이 지나면 누구나 책을 대출할 수 있다.
          6. 대출중인 책이 반환되면 다시 누구나 대출할 수 있다.
          7. 책이 대출중이거나 보관중일때는 예약을 취소할 수 있다.
          => 이 경우 ① 이용가능한 상태, ② 대출 중 상태, ③ 예약된 상태, ④ 보관중 상태
             네가지의 상태로 나눌 수 있다.
          => 인터페이스 내부에 들어갈 메소드인 행위는 ① 책을 체크아웃하기, ② 책을 예약하기,
             ③ 예약 취소하기, ④ 일정기간 보관중인 책이 보관상태에서 벗어날때(TimeOut), ⑤ 책 반환하기  일 것이다.

사용 예2) 1. 자판기에 돈을 넣고 버튼을 누르면 음료수를 뽑을 수 있다.
          2. 거스름돈이나 현재 넣은 돈을 반환할 수 있으며 반환한 돈의 액수를 출력한다.
          3. 음료의 가격과 재고를 지정할 수 있다.
          4. 돈을 넣으면 현재 넣은 돈의 총합을 출력한다.
          5. 돈이 없을때 음료 버튼이나 반환 버튼이 눌려지면 에러 메시지를 출력한다.
          6. 돈이 있어도 음료 가격보다 돈의 액수가 적으면 음료를 뽑을 수 없으며 에러 메시지를 출력한다.
          7. 재고가 있고 음료 가격 이상의 돈이 있을때 음료를 뽑을 수 있다.
          8. 음료가 매진되었을 경우 돈이 투입되면 곧바로 반환하고 에러 메시지를 출력한다.
          9. 음료가 매진되었을 경우 버튼이 눌려지면 에러메시지를 출력한다.
          => 이 경우 ① 돈이 없는 상태, ② 돈이 부족한 상태, ③ 돈이 충분한 상태, ④ 음료가 매진된 상태
             네가지의 상태로 나눌 수 있다.
          => 인터페이스 내부에 들어갈 메소드인 행위는 ① 돈을 투입하기, ② 버튼을 누르기, ③ 돈을 반환하기  일 것이다.
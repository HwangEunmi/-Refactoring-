
[팩토리 패턴]

// 객체를 생성하는 코드를 별도의 클래스/메소드로 분리함으로써
   객체 생성 방식의 변화에 대비하는데 유용하다.


   타입에 따라 객체를 생성하는 코드를 한 곳에서 관리하지 않으면, 변화(생성/수정/삭제)가 발생했을때
   해당 클라이언트 코드를 전부 수정해줘야 한다.

   객체지향 원칙에 의해서 확장에 대해서는 열려있고 변화에 대해서는 닫혀있어야 한다.
   때문에 변화가 일어날 수 있는 객체 생성을 담당하는 클래스를 만들어 한 곳에서 관리하여
   결합도를 줄이기 위해 사용하는 패턴이다.

참고 : JAVA 객체지향 디자인패턴 12장


[사용하는 이유]
Ex. Machine machine = null;
    switch(type) {
       case "One" :
          machine = new OneMachine();
       break;
       case "Two" :
          machine = new TwoMachine();
       break;
       case "Three" :
          machine = new ThreeMachine();
       break;
       default:
       break;
    }

    이렇게 객체 생성하는 코드가 여러 클래스에 존재한다고 가정하자.
    만약 "Four" 라는 타입을 추가해야 할 경우, 이 코드를 사용하는 모든 클래스를 수정해야 할 것이다.

    즉, 코드 중복을 줄일 수 있고 인터페이스(추상클래스/인터페이스 등) 를 구현하는 방식을 사용해
    다형성 장점도 있어 유연한 코드를 작성할 수 있다.

    => 변경이 일어나는 부분을 캡슐화 한다.
